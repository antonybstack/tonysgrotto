{"version":3,"sources":["contexts/TicketContext.js","addData/EditTicket.js","addData/DeleteTicket.js","ModalEdit.js","Ticket.js","displays/TicketDisplay.js","addData/AddBacklog.js","App.js","serviceWorker.js","index.js"],"names":["TicketContext","createContext","TicketProvider","props","useState","tickets","setTickets","useEffect","length","getTickets","a","axios","get","response","data","Provider","value","children","EditTicket","useContext","ticket","setTicket","ticket_name","name","setName","status","setStatus","console","log","_id","then","catch","error","className","onSubmit","e","preventDefault","newTicket","ticket_status","post","res","map","t","index","i","newTickets","slice","splice","for","type","onChange","target","selected","DeleteTicket","onClick","delete","customStyles","overlay","position","top","left","right","bottom","backgroundColor","content","paddingLeft","paddingRight","paddingBottom","marginRight","transform","background","Modal","setAppElement","document","getElementById","ModalEdit","subtitle","React","modalIsOpen","setIsOpen","closeModal","isOpen","onAfterOpen","style","color","onRequestClose","contentLabel","ref","_subtitle","Ticket","TicketDisplay","Fragment","currentTicket","key","AddBacklog","currentTickets","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.091146c0.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const TicketContext = createContext();\r\n\r\nexport const TicketProvider = (props) => {\r\n  const [tickets, setTickets] = useState([]);\r\n  useEffect(() => {\r\n    if (tickets.length) return; // so, we call just once\r\n    getTickets();\r\n  }, []);\r\n\r\n  const getTickets = async () => {\r\n    const response = await axios.get(\"http://localhost:8080/tickets/\");\r\n    setTickets(response.data);\r\n  };\r\n  return <TicketContext.Provider value={[tickets, setTickets]}>{props.children}</TicketContext.Provider>;\r\n};\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { TicketContext } from \"../contexts/TicketContext\";\r\n\r\nconst EditTicket = (props) => {\r\n  const [tickets, setTickets] = useContext(TicketContext);\r\n  const [ticket, setTicket] = useState(\"\");\r\n  const [name, setName] = useState(props.value.ticket.ticket.ticket_name);\r\n  const [status, setStatus] = useState(\"backlog\");\r\n  console.log(props);\r\n  console.log(tickets);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/tickets/\" + props.value.ticket.ticket._id)\r\n      .then((response) => {\r\n        setTicket(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value);\r\n    console.log({ name });\r\n  };\r\n  const handleChangeStatus = (e) => {\r\n    setStatus(e.target.value);\r\n    console.log({ status });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newTicket = {\r\n      ticket_name: name,\r\n      ticket_status: status,\r\n    };\r\n    axios.post(\"http://localhost:8080/tickets/update/\" + ticket._id, newTicket).then((res) => {\r\n      console.log(ticket._id);\r\n      console.log(res.data);\r\n      tickets.map((t, index) => {\r\n        if (t._id === ticket._id) {\r\n          const i = index;\r\n          console.log(i);\r\n          const newTickets = tickets.slice();\r\n          newTickets.splice(index, 1, {\r\n            ...ticket, //remove 1 element before 'index' and insert the following)\r\n            ticket_name: res.data.ticket.ticket_name,\r\n            ticket_status: res.data.ticket.ticket_status,\r\n          });\r\n          setTickets(newTickets);\r\n        }\r\n      });\r\n      // tickets.map((ticket, index) => {\r\n      //   const i = index;\r\n      //   const newTickets = tickets.slice();\r\n      //   newTickets.splice(index, 1, {\r\n      //     ...ticket, //remove 1 element before 'index' and insert the following)\r\n      //     ticket_name: res.data.ticket.ticket_name,\r\n      //     ticket_status: res.data.ticket.ticket_status,\r\n      //   });\r\n      //   console.log(newTickets);\r\n      //   setTickets(newTickets);\r\n      // });\r\n    });\r\n\r\n    setName(\"\"); //empties textbox\r\n    setStatus(\"\"); //empties textbox\r\n  };\r\n\r\n  return (\r\n    <div className=\"editForm\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label for=\"name\">Change Name:</label>\r\n        <input type=\"text\" name=\"name\" value={name} onChange={handleChangeName} />\r\n\r\n        <label for=\"status\">Change Status:</label>\r\n        <select name=\"status\" value={status} onChange={handleChangeStatus}>\r\n          <option selected value=\"backlog\">\r\n            backlog\r\n          </option>\r\n          <option value=\"sprint\">sprint</option>\r\n          <option value=\"progress\">progress</option>\r\n          <option value=\"done\">done</option>\r\n        </select>\r\n\r\n        <input type=\"submit\" name=\"Submit\" className=\"submit\"></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default EditTicket;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { TicketContext } from \"../contexts/TicketContext\";\r\n\r\nconst DeleteTicket = (props) => {\r\n  const [tickets, setTickets] = useContext(TicketContext);\r\n  const [ticket, setTicket] = useState(\"\");\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/tickets/\" + props.value.ticket.ticket._id)\r\n      .then((response) => {\r\n        setTicket(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios.delete(\"http://localhost:8080/tickets/delete/\" + ticket._id).then((res) => {\r\n      tickets.map((t, index) => {\r\n        if (t._id === ticket._id) {\r\n          const i = index;\r\n          console.log(i);\r\n          const newTickets = tickets.slice();\r\n          newTickets.splice(i, 1); //remove 1 element before 'index' (3rd parameter is empty because we dont want to insert anything)\r\n          setTickets(newTickets);\r\n        }\r\n      });\r\n    });\r\n\r\n    // props.history.push(\"/\");\r\n\r\n    // setTickets((currentTickets) => [...currentTickets, { name: name, status: \"backlog\", id: uuid() }]);\r\n  };\r\n\r\n  return (\r\n    <button className=\"deleteBtn\" onClick={handleSubmit}>\r\n      Delete Ticket\r\n    </button>\r\n  );\r\n};\r\nexport default DeleteTicket;\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport EditTicket from \"./addData/EditTicket\";\r\nimport DeleteTicket from \"./addData/DeleteTicket\";\r\n\r\nconst customStyles = {\r\n  overlay: {\r\n    position: \"fixed\",\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: \"rgba(44, 47, 51, 0.75)\",\r\n  },\r\n  content: {\r\n    paddingLeft: \"75px\",\r\n    paddingRight: \"75px\",\r\n    paddingBottom: \"50px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    background: \"var(--dark)\",\r\n  },\r\n};\r\n\r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement(document.getElementById(\"root\"));\r\n\r\nconst ModalEdit = (props) => {\r\n  var subtitle;\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  // console.log(props);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    subtitle.style.color = \"#f00\";\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"editButton\" onClick={openModal}>\r\n        edit\r\n      </button>\r\n      <Modal isOpen={modalIsOpen} onAfterOpen={afterOpenModal} onRequestClose={closeModal} style={customStyles} contentLabel=\"Example Modal\">\r\n        <h2 ref={(_subtitle) => (subtitle = _subtitle)}>edit/delete</h2>\r\n        <EditTicket value={props} />\r\n        <div className=\"\">\r\n          <DeleteTicket value={props} />\r\n          <button className=\"closeModal\" onClick={closeModal}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalEdit;\r\n","import React from \"react\";\r\nimport ModalEdit from \"./ModalEdit\";\r\n\r\nconst Ticket = (props) => {\r\n  // console.log(\"test\");\r\n  // console.log(\"props\", props);\r\n  return (\r\n    <tr className=\"ticketItem\">\r\n      <td className=\"edit-button-data\">{props.ticket.ticket_name && <ModalEdit ticket={props} />}</td>\r\n      <td className=\"status-data\">{props.ticket.ticket_status}</td>\r\n      <td className=\"name-data\">{props.ticket.ticket_name}</td>\r\n      <td className=\"name-data\">{props.ticket._id}</td>\r\n      {/* <td className=\"id-data\">ID: {props.ticket._id}</td> */}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Ticket;\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport Ticket from \"../Ticket\";\r\nimport { TicketContext } from \"../contexts/TicketContext\";\r\n\r\nconst TicketDisplay = (props) => {\r\n  const [tickets, setTickets] = useContext(TicketContext);\r\n  console.log(\"TicketDisplay mounted\");\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <p>User: Tony</p>\r\n        <p>Number of Tickets: {tickets.length}</p>\r\n      </div>\r\n      <div className=\"display\">\r\n        <div className=\"backlog\">\r\n          <h1>Backlog</h1>\r\n          <th className=\"nameheader\">NAME</th>\r\n          <table>\r\n            {/* <tbody>\r\n              {tickets.map((currentTicket, i) => (\r\n                <Ticket ticket={currentTicket} key={i} />\r\n              ))}\r\n            </tbody> */}\r\n            <tbody>{tickets.map((currentTicket, i) => currentTicket.ticket_status == \"backlog\" && <Ticket ticket={currentTicket} key={i} />)}</tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"sprint\">\r\n          <h1>Sprint</h1>\r\n          <th className=\"nameheader\">NAME</th>\r\n          <table>\r\n            <tbody>{tickets.map((currentTicket, i) => currentTicket.ticket_status == \"sprint\" && <Ticket ticket={currentTicket} key={i} />)}</tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"progress\">\r\n          <h1>Progress</h1>\r\n          <th className=\"nameheader\">NAME</th>\r\n          <table>\r\n            <tbody>{tickets.map((currentTicket, i) => currentTicket.ticket_status == \"progress\" && <Ticket ticket={currentTicket} key={i} />)}</tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"done\">\r\n          <h1>Done</h1>\r\n          <th className=\"nameheader\">NAME</th>\r\n          <table>\r\n            <tbody>{tickets.map((currentTicket, i) => currentTicket.ticket_status == \"done\" && <Ticket ticket={currentTicket} key={i} />)}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n  // <div className=\"display\">\r\n  //   <div className=\"backlog\">\r\n  //     <h1>Backlog</h1>\r\n  //     {tickets.map((ticket, index) => (\r\n  //       <div key={ticket.id}>\r\n  //         {ticket.status === \"backlog\" && (\r\n  //           <div className=\"ticketBlock\">\r\n  //             <button\r\n  //               onClick={(e) => {\r\n  //                 const newTickets = tickets.slice();\r\n  //                 newTickets.splice(index, 1, {\r\n  //                   ...ticket,\r\n  //                   status: \"sprint\",\r\n  //                 });\r\n  //                 setTickets(newTickets);\r\n  //               }}\r\n  //             >\r\n  //               push\r\n  //             </button>\r\n  //             &nbsp;\r\n  //             <Ticket name={ticket.name} status={ticket.status} key={ticket.id} />\r\n  //           </div>\r\n  //         )}\r\n  //       </div>\r\n  //     ))}\r\n  //   </div>\r\n\r\n  //   <div className=\"sprint\">\r\n  //     <h1>Sprint</h1>\r\n  //     <div>\r\n  //       {tickets.map((ticket, index) => (\r\n  //         <div key={ticket.id}>\r\n  //           {ticket.status === \"sprint\" && (\r\n  //             <div className=\"ticketBlock\">\r\n  //               <button\r\n  //                 onClick={(e) => {\r\n  //                   const newTickets = tickets.slice();\r\n  //                   newTickets.splice(index, 1, {\r\n  //                     ...ticket,\r\n  //                     status: \"progress\",\r\n  //                   });\r\n  //                   setTickets(newTickets);\r\n  //                 }}\r\n  //               >\r\n  //                 push\r\n  //               </button>\r\n  //               &nbsp;\r\n  //               <Ticket name={ticket.name} status={ticket.status} key={ticket.id} />\r\n  //             </div>\r\n  //           )}\r\n  //         </div>\r\n  //       ))}\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"progress\">\r\n  //     <h1>Progress</h1>\r\n  //     <div>\r\n  //       {tickets.map((ticket, index) => (\r\n  //         <div key={ticket.id}>\r\n  //           {ticket.status === \"progress\" && (\r\n  //             <div className=\"ticketBlock\">\r\n  //               <button\r\n  //                 onClick={(e) => {\r\n  //                   const newTickets = tickets.slice();\r\n  //                   newTickets.splice(index, 1, {\r\n  //                     ...ticket,\r\n  //                     status: \"done\",\r\n  //                   });\r\n  //                   setTickets(newTickets);\r\n  //                 }}\r\n  //               >\r\n  //                 push\r\n  //               </button>\r\n  //               &nbsp;\r\n  //               <Ticket name={ticket.name} status={ticket.status} key={ticket.id} />\r\n  //             </div>\r\n  //           )}\r\n  //         </div>\r\n  //       ))}\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"done\">\r\n  //     <h1>Done</h1>\r\n  //     <div>\r\n  //       {tickets.map((ticket, index) => (\r\n  //         <div key={ticket.id}>\r\n  //           {ticket.status === \"done\" && (\r\n  //             <div className=\"ticketBlock\">\r\n  //               <button\r\n  //                 onClick={(e) => {\r\n  //                   const newTickets = tickets.slice();\r\n  //                   newTickets.splice(index, 1, {\r\n  //                     ...ticket,\r\n  //                     status: \"backlog\",\r\n  //                   });\r\n  //                   setTickets(newTickets);\r\n  //                 }}\r\n  //               >\r\n  //                 push\r\n  //               </button>\r\n  //               &nbsp;\r\n  //               <Ticket name={ticket.name} status={ticket.status} key={ticket.id} />\r\n  //             </div>\r\n  //           )}\r\n  //         </div>\r\n  //       ))}\r\n  //     </div>\r\n  //   </div>\r\n  // </div>\r\n};\r\n\r\nexport default TicketDisplay;\r\n","import React from \"react\";\r\nimport { useContext, useState } from \"react\";\r\nimport { TicketContext } from \"../contexts/TicketContext\";\r\nimport axios from \"axios\";\r\n//props takes in data from Link, includes data like location /create\r\nconst AddBacklog = (props) => {\r\n  const [tickets, setTickets] = useContext(TicketContext);\r\n\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n    console.log({ name });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newTicket = {\r\n      ticket_name: name,\r\n      ticket_status: \"backlog\",\r\n    };\r\n    console.log(\"this is testing tickets in addbacklog\", tickets);\r\n    axios.post(\"http://localhost:8080/tickets/add\", newTicket).then((res) => {\r\n      setTickets((currentTickets) => [...currentTickets, { _id: res.data.ticket._id, ticket_name: name, ticket_status: \"backlog\" }]);\r\n    });\r\n\r\n    //setTickets((currentTickets) => [...currentTickets, { _id: uuid(), ticket_name: name, ticket_status: \"backlog\" }]);\r\n\r\n    setName(\"\");\r\n    // props.history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"addTicket\">\r\n        <label>\r\n          <p>Add Ticket:</p>\r\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n        </label>\r\n        <input type=\"submit\" name=\"Submit\" className=\"submit\"></input>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddBacklog;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { TicketProvider } from \"./contexts/TicketContext\";\nimport TicketDisplay from \"./displays/TicketDisplay\";\nimport AddBacklog from \"./addData/AddBacklog\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <TicketProvider>\n      <Router>\n        <div className=\"App\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            MERN-Stack Bug Tracker App\n          </Link>\n          <AddBacklog />\n          <Route path=\"/\" exact component={TicketDisplay} />\n          {/* <Route path=\"/edit/:id\" component={EditTicket} /> */}\n          {/* <Route path=\"/create\" component={AddBacklog} /> */}\n        </div>\n      </Router>\n    </TicketProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}